/* automatically generated by rust-bindgen 0.59.1 */

pub type haval_word = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct haval_state {
    pub count: [haval_word; 2usize],
    pub fingerprint: [haval_word; 8usize],
    pub block: [haval_word; 32usize],
    pub remainder: [::std::os::raw::c_uchar; 128usize],
}
#[test]
fn bindgen_test_layout_haval_state() {
    assert_eq!(
        ::std::mem::size_of::<haval_state>(),
        296usize,
        concat!("Size of: ", stringify!(haval_state))
    );
    assert_eq!(
        ::std::mem::align_of::<haval_state>(),
        4usize,
        concat!("Alignment of ", stringify!(haval_state))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<haval_state>())).count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(haval_state),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<haval_state>())).fingerprint as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(haval_state),
            "::",
            stringify!(fingerprint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<haval_state>())).block as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(haval_state),
            "::",
            stringify!(block)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<haval_state>())).remainder as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(haval_state),
            "::",
            stringify!(remainder)
        )
    );
}
#[link(name = "haval", kind = "static")]
extern "C" {
    pub fn haval_string(arg1: *const ::std::os::raw::c_char, arg2: *mut ::std::os::raw::c_uchar);
}

#[link(name = "haval", kind = "static")]
extern "C" {
    pub fn haval_file(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}

#[link(name = "haval", kind = "static")]
extern "C" {
    pub fn haval_stdin();
}

#[link(name = "haval", kind = "static")]
extern "C" {
    pub fn haval_start(arg1: *mut haval_state);
}

#[link(name = "haval", kind = "static")]
extern "C" {
    pub fn haval_hash(
        arg1: *mut haval_state,
        arg2: *mut ::std::os::raw::c_uchar,
        arg3: ::std::os::raw::c_uint,
    );
}

#[link(name = "haval", kind = "static")]
extern "C" {
    pub fn haval_end(arg1: *mut haval_state, arg2: *mut ::std::os::raw::c_uchar);
}

#[link(name = "haval", kind = "static")]
extern "C" {
    pub fn haval_hash_block(arg1: *mut haval_state);
}
