use bytes::Bytes;
use uuid::Uuid;

/// Opcode to determine the purpose of a transaction
#[repr(u16)]
pub enum HLOpcode {
	Reply = 0,
	Error = 100,
	MsgsGet,
	MsgNew,
	NewsPostOld,
	ServerMsg,
	ChatSend,
	ChatMsg,
	Login,
	MsgSend,
	AgreementShow,
	UserDisconnect,
	DisconnectMsg,
	ChatInviteNew,
	ChatInvite,
	ChatInviteReject,
	ChatJoin,
	ChatLeave,
	ChatNotifyChangeUser,
	ChatNotifyDeleteUser,
	ChatNotifyTopic,
	ChatTopicSet,
	Agreed,
	ServerBanner,
	FileNameListGet = 200,
	FileDownload = 202,
	FileUpload,
	FileDelete,
	FolderNew,
	FileInfoGet,
	FileInfoSet,
	FileMove,
	FileAliasMake,
	FolderDownload,
	DownloadInfo,
	BannerDownload,
	FolderUpload,
	UserNameListGet = 300,
	NotifyEditUser,
	NotifyDeleteUser,
	ClientInfoGet,
	ClientInfoSet,
	UserNew = 350,
	UserDelete,
	UserGet,
	UserSet,
	UserAccess,
	UserBroadcast,
	NewsCategoryNameListGet = 370,
	NewsArticleNameListGet,
	NewsItemDelete = 380,
	NewsFolderNew,
	NewsCategoryNew,
	NewsArticleDataGet = 400,
	NewsArticlePost = 410,
	NewsArticleDelete,
	ConnectionKeepAlive = 500,
}

#[derive(Debug)]
pub struct HLFrameHeader {
	pub _reserved: u8,
	pub reply: u8,
	pub opcode: HLOpcode,
	pub id: u32,
	pub error: u32,
	pub chunk_size: u32,
	pub total_size: u32,
}

/// Hotline client<->server message structure
#[derive(Debug)]
pub struct HLFrame {
	pub header: HLFrameHeader,
	pub params: Option<Vec<HLParameter>>,
}

#[repr(u16)]
pub(crate) enum HLUserMsgOption {
	Msg = 1,
	RefuseMsg,
	RefuseChat,
	AutoReply,
}

/// A frame's parameter's ID
#[repr(u16)]
pub enum HLParamID {
	ErrorText = 100,
	Data,
	UserName,
	UserID,
	UserIconID,
	UserLogin,
	UserPassword,
	RefNum,
	TransferSize,
	ChatOptions,
	UserAccess,
	UserAlias,
	UserFlags,
	Options,
	ChatID,
	ChatTopic,
	WaitingCount,
	Agreement = 150,
	Banner,
	BannerType,
	BannerURL,
	NoAgreement,
	Version = 160,
	BannerID,
	ServerName,
	FileInfo = 200,
	FileName,
	FilePath,
	FileResumeData,
	FileTransferOptions,
	FileTypeString,
	FileCreatorString,
	FileSize,
	FileCreateDate,
	FileModifyDate,
	FileComment,
	FileNameNew,
	FilePathNew,
	FileType,
	QuotingMsg,
	AutoReply,
	FolderItemCount = 220,
	UserInfo = 300,
	NewsCategoryGUID = 319,
	NewsCategoryListDataOld,
	NewsArticleListData,
	NewsCategoryName,
	NewsCategoryListData,
	NewsPath,
	NewsArticleID,
	NewsArticleDataFlavor,
	NewsArticleTitle,
	NewsArticlePoster,
	NewsArticleDate,
	NewsArticlePrev,
	NewsArticleNext,
	NewsArticleData,
	NewsArticleFlags,
	NewsArticleParent,
	NewsArticle1stChild,
	NewsArticleRecursiveDelete,
}

pub struct HLParameter {
	pub id: HLParamID,
	pub data: HLParamData,
}

// A frame's parameter payload
pub enum HLParamData {
	ErrorText(Vec<u8>),
	Data(Vec<u8>),
	UserName(Vec<u8>),
	UserID(u16),
	UserIconID(u16),
	UserLogin(Vec<u8>),
	UserPassword(Vec<u8>),
	RefNum,
	TransferSize(u32),
	ChatOptions,
	UserAccess(HLUserAccess),
	UserAlias(Vec<u8>),
	UserFlags(HLUserFlags),
	Options,
	ChatID(u16),
	ChatTopic(Vec<u8>),
	WaitingCount,
	Agreement(Vec<u8>),
	Banner(Vec<u8>), // ignored due to security flaws
	BannerType(u32), // ignored due to security flaws
	BannerURL(Vec<u8>), // ignored due to security flaws
	NoAgreement(u16),
	Version(u16),
	BannerID(u16),
	ServerName(Vec<u8>),
	FileInfo {
		kind: u32,
		creator: u32,
		size: u32,
		name_script: u16,
		name: Vec<u8>,
	},
	FileName(Vec<u8>),
	FilePath,
	FileResumeData {
		format: u32,
		version: u16,
		forks: [HLFileForkInfo; 2],
	},
	FileTransferOptions,
	FileTypeString(Vec<u8>),
	FileCreatorString(Vec<u8>),
	FileSize(u32),
	FileCreateDate,
	FileModifyDate,
	FileComment(Vec<u8>),
	FileNameNew(Vec<u8>),
	FilePathNew,
	FileType(u32),
	QuotingMsg(Vec<u8>),
	AutoReply(Vec<u8>),
	FolderItemCount,
	UserInfo {
		id: u16,
		icon_id: u16,
		flags: HLUserFlags,
		name: Vec<u8>,
	},
	NewsCategoryGUID(Uuid),
	NewsCategoryListDataOld { // ignored
		kind: u8,
		name: Vec<u8>,
	},
	NewsArticleListData {
		id: u32,
		name: Vec<u8>,
		description: Vec<u8>,
	},
	NewsCategoryName(Vec<u8>),
	NewsCategoryListData,
	NewsPath,
	NewsArticleID,
	NewsArticleDataFlavor,
	NewsArticleTitle(Vec<u8>),
	NewsArticlePoster(Vec<u8>),
	NewsArticleDate,
	NewsArticlePrev,
	NewsArticleNext,
	NewsArticleData(Vec<u8>),
	NewsArticleFlags,
	NewsArticleParent,
	NewsArticle1stChild,
	NewsArticleRecursiveDelete,
}
